// Generated by CoffeeScript 1.6.2
var defaultValidate, otTypes;

otTypes = require('ottypes');

exports.normalize = function(opData) {
  if (opData.create) {
    return opData.create.type = otTypes[opData.create.type].uri;
  }
};

exports.checkOpData = function(opData) {
  if (typeof opData !== 'object') {
    return 'Missing opData';
  }
  if (typeof (opData.op || opData.create) !== 'object' && opData.del !== true) {
    return 'Missing op1';
  }
  if (opData.create && typeof opData.create.type !== 'string') {
    return 'Missing create type';
  }
  if ((opData.src != null) && typeof opData.src !== 'string') {
    return 'Invalid src';
  }
  if ((opData.seq != null) && typeof opData.seq !== 'number') {
    return 'Invalid seq';
  }
  if (!!opData.seq !== !!opData.src) {
    return 'seq but not src';
  }
};

defaultValidate = function() {};

exports.apply = function(data, opData) {
  var atom, atomicOps, create, e, err, op, preValidate, snapshot, type, validate, _i, _len;

  if (typeof opData !== 'object') {
    return 'Missing data';
  }
  if (!(typeof (opData.op || opData.create) === 'object' || opData.del === true)) {
    return 'Missing op';
  }
  if ((data.v != null) && (opData.v != null) && data.v !== opData.v) {
    return 'Version mismatch';
  }
  validate = opData.validate || defaultValidate;
  preValidate = opData.preValidate || defaultValidate;
  if (opData.create) {
    if (data.type) {
      return 'Document already exists';
    }
    create = opData.create;
    type = otTypes[create.type];
    if (!type) {
      return "Type not found";
    }
    err = preValidate(opData, data);
    if (err) {
      return err;
    }
    snapshot = type.create(create.data);
    data.data = snapshot;
    data.type = type.uri;
    data.v++;
    err = validate(opData, data);
    if (err) {
      return err;
    }
  } else if (opData.del) {
    err = preValidate(opData, data);
    if (err) {
      return err;
    }
    opData.prev = {
      data: data.data,
      type: data.type
    };
    delete data.data;
    delete data.type;
    data.v++;
    err = validate(opData, data);
    if (err) {
      return err;
    }
  } else {
    if (!data.type) {
      return 'Document does not exist';
    }
    op = opData.op;
    if (typeof op !== 'object') {
      return 'Missing op';
    }
    type = otTypes[data.type];
    if (!type) {
      return 'Type not found';
    }
    try {
      atomicOps = type.shatter ? type.shatter(op) : [op];
      for (_i = 0, _len = atomicOps.length; _i < _len; _i++) {
        atom = atomicOps[_i];
        opData.op = atom;
        err = preValidate(opData, data);
        if (err) {
          return err;
        }
        data.data = type.apply(data.data, atom);
        err = validate(opData, data);
        if (err) {
          return err;
        }
      }
      opData.op = op;
    } catch (_error) {
      e = _error;
      console.log(e.stack);
      return e.message;
    }
    data.v++;
  }
};

exports.transform = function(type, opData, appliedOpData) {
  if (appliedOpData.del) {
    return 'Document was deleted';
  }
  if (appliedOpData.create) {
    return 'Document created remotely';
  }
  if (!type) {
    return 'Document does not exist';
  }
  if (typeof type === 'string') {
    type = otTypes[type];
    if (!type) {
      return "Type not found";
    }
  }
  opData.op = type.transform(opData.op, appliedOpData.op, 'left');
  opData.v++;
};

/*
//@ sourceMappingURL=ot.map
*/
